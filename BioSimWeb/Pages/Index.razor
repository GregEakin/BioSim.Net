@page "/"

@inject IJSRuntime JsRuntime

<h1>Hello, world!</h1>

<div id="canvasContainer" style="position: fixed; opacity: 1; background-color: white; width: 100%; height: 100%">
    <BECanvas @ref="_canvas"></BECanvas>
</div>

@code
{
    private BECanvasComponent? _canvas;
    private Simulation? _simulation;
    private InputService? _inputService;
    
    private bool _initialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        if (_canvas == null) return;
        if (_initialized) return;
        _initialized = true;

        var canvasMeta = await JsRuntime.InvokeAsync<CanvasMeta>("initCanvas", DotNetObjectReference.Create(this));
        _canvas.Height = canvasMeta.Height;
        _canvas.Width = canvasMeta.Width;

        _simulation = new BioSimulation(_canvas);
        _inputService ??= _simulation.GetService<InputService>();

        await JsRuntime.InvokeAsync<object>("simWindowResize", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async ValueTask SimLoop()
    {
        if (_simulation == null) return;
        await _simulation.Step();
    }

    [JSInvokable]
    public ValueTask OnResize(int screenWidth, int screenHeight)
    {
        if (_simulation == null) return ValueTask.CompletedTask;
        _simulation.Display.Size = new Size(screenWidth, screenHeight);
        return ValueTask.CompletedTask;
    }

    [JSInvokable]
    public ValueTask OnKeyDown(int keyCode)
    {
        _inputService?.SetKeyState((Keys)keyCode, ButtonState.States.Down);
        return ValueTask.CompletedTask;
    }

    [JSInvokable]
    public ValueTask OnKeyUp(int keyCode)
    {
        _inputService?.SetKeyState((Keys)keyCode, ButtonState.States.Up);
        return ValueTask.CompletedTask;
    }

    public class CanvasMeta
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }
}